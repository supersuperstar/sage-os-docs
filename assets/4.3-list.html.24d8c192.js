import{_ as p,r as t,c as e,a as n,d as o,F as c,e as l,b as s,o as u}from"./app.a9a8660b.js";const r={},i=l(`<h1 id="_4-3-list-\u53CC\u5411\u5FAA\u73AF\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#_4-3-list-\u53CC\u5411\u5FAA\u73AF\u94FE\u8868" aria-hidden="true">#</a> 4.3 list \u53CC\u5411\u5FAA\u73AF\u94FE\u8868</h1><h2 id="\u8BBE\u8BA1\u76EE\u7684" tabindex="-1"><a class="header-anchor" href="#\u8BBE\u8BA1\u76EE\u7684" aria-hidden="true">#</a> \u8BBE\u8BA1\u76EE\u7684</h2><p>\u5728\u64CD\u4F5C\u7CFB\u7EDF\u4E2D\uFF0C\u9700\u8981\u5927\u91CF\u7684\u94FE\u8868\u7ED3\u6784\u6765\u5B9E\u73B0\u7CFB\u7EDF\u5143\u6570\u636E\u4FE1\u606F\u7684CRUD\u3002\u7136\u800C\uFF0Cc\u8BED\u8A00\u4E0D\u50CF\u5176\u4ED6\u9AD8\u7EA7\u8BED\u8A00\uFF08\u5982c++\u3001java\uFF09\u53EF\u4EE5\u63D0\u4F9B\u65B9\u4FBF\u6613\u8BFB\u7684\u6CDB\u578B\uFF0C\u6240\u4EE5\u5C31\u7F16\u5199\u4E86<code>list.h</code>\u6587\u4EF6\uFF0C\u63D0\u4F9B\u4E86\u4E00\u4E2A\u5404\u4E2A\u7ED3\u6784\u4F53\u7C7B\u578B\u90FD\u53EF\u4EE5\u4F7F\u7528\u7684\u94FE\u8868\u63A5\u53E3\uFF0C\u7B80\u5316\u4EE3\u7801\u3002</p><h2 id="\u63A5\u53E3\u8BF4\u660E" tabindex="-1"><a class="header-anchor" href="#\u63A5\u53E3\u8BF4\u660E" aria-hidden="true">#</a> \u63A5\u53E3\u8BF4\u660E</h2><ol><li><p>\u94FE\u8868\u8282\u70B9\u521D\u59CB\u5316</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u521D\u59CB\u5316\u8282\u70B9</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LIST_HEAD_INIT</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">{</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LIST_HEAD</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span> name <span class="token operator">=</span> <span class="token function">LIST_HEAD_INIT</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>

<span class="token comment">//\u521D\u59CB\u5316\u5934\u8282\u70B9</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  list<span class="token operator">-&gt;</span>next <span class="token operator">=</span> list<span class="token punctuation">;</span>
  list<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>\u8BBF\u95EE\u94FE\u8868\u4E2D\u7684\u8282\u70B9</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_entry</span><span class="token expression"><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> type<span class="token punctuation">,</span> member<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>member<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>\u904D\u5386\u94FE\u8868\uFF08\u8282\u70B9\uFF09</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6B63\u5411\u904D\u5386</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> head<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> pos <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> pos <span class="token operator">=</span> pos<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span></span></span>

<span class="token comment">//\u53CD\u5411\u904D\u5386</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_prev</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> head<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">-&gt;</span>prev<span class="token punctuation">;</span> pos <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> pos <span class="token operator">=</span> pos<span class="token operator">-&gt;</span>prev<span class="token punctuation">)</span></span></span>

<span class="token comment">//\u5B89\u5168\u904D\u5386\uFF0C\u9632\u6B62\u51FA\u73B0panic</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_safe</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> n<span class="token punctuation">,</span> head<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> n <span class="token operator">=</span> pos<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> pos <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> pos <span class="token operator">=</span> n<span class="token punctuation">,</span> n <span class="token operator">=</span> pos<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span></span></span>

<span class="token comment">//\u904D\u5386\u5E76\u8BBF\u95EE\u8282\u70B9</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_entry</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> head<span class="token punctuation">,</span> member<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
       <span class="token expression"><span class="token operator">&amp;</span>pos<span class="token operator">-&gt;</span>member <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
       <span class="token expression">pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-&gt;</span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li><li><p>\u589E/\u5220/\u6539</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5411head\u7684\u4E0B\u4E00\u4E2A\u8282\u70B9\u6DFB\u52A0node</span>
<span class="token keyword">void</span> <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> node<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//\u5411head\u7684\u524D\u4E00\u4E2A\u8282\u70B9\u6DFB\u52A0node</span>
<span class="token keyword">void</span> <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> node<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//\u5220\u9664\u67D0\u4E00\u8282\u70B9</span>
<span class="token keyword">void</span> <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//\u5C06list\u79FB\u52A8\u5230node\u540E</span>
<span class="token keyword">void</span> <span class="token function">list_move</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> list<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//\u5C06list\u79FB\u52A8\u5230node\u524D</span>
<span class="token keyword">void</span> <span class="token function">list_move_tail</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> list<span class="token punctuation">,</span>
                                  <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//\u5224\u65AD\u94FE\u8868\u662F\u5426\u4E3A\u7A7A</span>
<span class="token keyword">int</span> <span class="token function">list_empty</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li></ol><h3 id="\u4F7F\u7528\u793A\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u793A\u4F8B" aria-hidden="true">#</a> \u4F7F\u7528\u793A\u4F8B</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 	<span class="token keyword">int</span> grade<span class="token punctuation">;</span>
  
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">student_t</span><span class="token punctuation">;</span>

<span class="token class-name">student_t</span> students<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">&quot;stu1&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;stu2&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;stu3&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;stu4&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token class-name">list_head</span> root_list<span class="token punctuation">;</span>
<span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>root_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">student_t</span><span class="token operator">*</span> pos <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token function">list_for_each_entry</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> root_list<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;name:%s\\tgrade:%d\\n&quot;</span><span class="token punctuation">,</span> pos<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> pos<span class="token operator">-&gt;</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="\u8BE6\u7EC6\u8BBE\u8BA1" tabindex="-1"><a class="header-anchor" href="#\u8BE6\u7EC6\u8BBE\u8BA1" aria-hidden="true">#</a> \u8BE6\u7EC6\u8BBE\u8BA1</h2><p>\u57FA\u7840\u8282\u70B9\u7ED3\u6784\u4F53\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> prev<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u6709\u5173\u4E8E\u53CC\u5411\u5FAA\u73AF\u94FE\u8868\u7684\u589E\u5220\u67E5\u6539\u7684\u90E8\u5206\u6211\u4EEC\u4E0D\u591A\u8D58\u8FF0\uFF0C\u8FD9\u91CC\u8BF4\u660E\u4E00\u4E0B<code>list.h</code>\u662F\u5982\u4F55\u5B9E\u73B0\u901A\u7528\u6027\u94FE\u8868\u7684\uFF0C\u4EE5\u53CA\u901A\u8FC7\u94FE\u8868\u8BBF\u95EE\u8282\u70B9\u4FE1\u606F\u7684\u3002</p><p>\u4E0D\u540C\u4E8E\u6211\u4EEC\u8BA4\u77E5\u4E2D\u7684\u94FE\u8868\u8282\u70B9\u5305\u542B\u8282\u70B9\u4FE1\u606F\uFF0C\u8FD9\u4E2A\u6570\u636E\u7ED3\u6784\u7684\u8BBE\u8BA1\u4E3A\u8282\u70B9\u4FE1\u606F\u5305\u542B\u94FE\u8868\u8282\u70B9\uFF0C\u5177\u4F53\u7684\u5982\u4E0B\u56FE\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>       struct                struct                 struct                struct
    +-----------+         +-----------+          +-----------+         +-----------+
    |           |         |           |          |           |         |           |
    |           |         |           |          |           |         |           |
    |           |         |           |          |           |         |           |
    | list_head |         | list_head |          | list_head |         | list_head |
    | +-------+ |         | +-------+ |          | +-------+ |         | +-------+ |
    | | .prev |&lt;+---------+-+ .prev |&lt;+----------+-+ .prev |&lt;+---------+-+ .prev | |
    | |       | |         | |       | |          | |       | |         | |       | |
    | | .next +-+---------+&gt;| .next +-+----------+&gt;| .next +-+---------+&gt;| .next | |
    | +-------+ |         | +-------+ |          | +-------+ |         | +-------+ |
    |           |         |           |          |           |         |           |
    |           |         |           |          |           |         |           |
    |           |         |           |          |           |         |           |
    +-----------+         +-----------+          +-----------+         +-----------+
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>\u5F53\u6211\u4EEC\u83B7\u53D6\u5230\u4E86\u4E00\u4E2A<code>struct list_head</code>\u53D8\u91CF\u65F6\uFF0C\u5982\u679C\u6211\u4EEC\u77E5\u9053\u5B83\u5916\u90E8\u7684\u7ED3\u6784\u4F53\u7C7B\u578B\uFF08\u6BD4\u5982<code>student_t</code>\uFF09\u548C\u94FE\u8868\u8282\u70B9\u5728\u7ED3\u6784\u4F53\u91CC\u7684\u5C5E\u6027\u540D\u79F0\uFF0C\u6211\u4EEC\u5C31\u5F88\u5BB9\u6613\u8BA1\u7B97\u8282\u70B9\u5728\u7ED3\u6784\u4F53\u4E2D\u7684\u504F\u79FB\u91CF\uFF0C\u90A3\u4E48\u5F97\u5230\u4E86\u504F\u79FB\u91CF\uFF0C\u5C06<code>list_head</code>\u7684\u5730\u5740\u51CF\u53BB\u504F\u79FB\u91CF\uFF0C\u5C31\u53EF\u4EE5\u5F97\u5230\u7ED3\u6784\u4F53\u7684\u5730\u5740\u4E86\u3002\u8FD9\u65F6\u6211\u4EEC\u770B<code>list_entry</code>\u7684\u5B9A\u4E49\u5C31\u53EF\u4EE5\u5F88\u6E05\u6670\u4E86\u3002</p><p>\u5176\u4E2D<code>(unsigned long)(&amp;((type*)0)-&gt;member))</code>\u5C31\u662F\u4E3A\u4E86\u8BA1\u7B97\u8282\u70B9\u5728\u7ED3\u6784\u4F53\u4E2D\u7684\u504F\u79FB\u91CF\u7684\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_entry</span><span class="token expression"><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> type<span class="token punctuation">,</span> member<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>member<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="\u53C2\u8003\u8D44\u6599" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003\u8D44\u6599" aria-hidden="true">#</a> \u53C2\u8003\u8D44\u6599</h2>`,17),k=s("[1] "),d={href:"https://github.com/torvalds/linux/blob/master/include/linux/list.h",target:"_blank",rel:"noopener noreferrer"},m=s("linux/list.h\u6E90\u4EE3\u7801");function b(h,_){const a=t("ExternalLinkIcon");return u(),e(c,null,[i,n("ul",null,[n("li",null,[k,n("a",d,[m,o(a)])])])],64)}var v=p(r,[["render",b],["__file","4.3-list.html.vue"]]);export{v as default};
